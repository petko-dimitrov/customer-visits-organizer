<?php

namespace CVOBundle\Repository;
use CVOBundle\Entity\Visit;
use DateInterval;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;

/**
 * VisitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VisitRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct(EntityManagerInterface $em)
    {
        parent::__construct($em, new Mapping\ClassMetadata(Visit::class));
    }

    public function save(Visit $visit)
    {
        $this->_em->persist($visit);
        $this->_em->flush();
    }

    public function edit(Visit $visit)
    {
        $this->_em->merge($visit);
        $this->_em->flush();
    }

    public function delete(Visit $visit)
    {
        $this->_em->remove($visit);
        $this->_em->flush();
    }

    public function findVisits($startDate, $endDate, $isFinished)
    {
        return $this->createQueryBuilder('v')
            ->where('v.date >= :startDate
            AND v.date <= :endDate
            AND v.isFinished = :isFinished')
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->setParameter('isFinished', $isFinished)
            ->orderBy('v.date')
            ->addOrderBy('v.time')
            ->getQuery()
            ->getResult();
    }

    public function findVisitsByCustomer($customer, $startDate, $endDate, $isFinished)
    {
        return $this->createQueryBuilder('v')
            ->where('v.customer = :customer
            AND v.date >= :startDate
            AND v.date <= :endDate
            AND v.isFinished = :isFinished')
            ->setParameter('customer', $customer)
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->setParameter('isFinished', $isFinished)
            ->orderBy('v.date')
            ->addOrderBy('v.time')
            ->getQuery()
            ->getResult();
    }

    public function findVisitsByUser($userId, $startDate, $endDate, $isFinished)
    {
        return $this->createQueryBuilder('v')
            ->where(':user_id MEMBER OF v.users 
            AND v.date >= :startDate
            AND v.date <= :endDate
            AND v.isFinished = :isFinished')
            ->setParameter('user_id', $userId)
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->setParameter('isFinished', $isFinished)
            ->orderBy('v.date')
            ->addOrderBy('v.time')
            ->getQuery()
            ->getResult();
    }

    public function deleteUsers($visitId)
    {
        $connection = $this->_em->getConnection();
        $statement = $connection->prepare("DELETE FROM users_visits WHERE visit_id = :id");
        $statement->bindValue('id', $visitId);
        $statement->execute();
    }

    public function findIncome($startDate, $endDate, $paymentType)
    {
        $query = $this->_em->createQuery(
            "SELECT SUM(v.taxCollected) AS result
                FROM CVOBundle:Visit v
                WHERE v.date >= :startDate
                AND v.date <= :endDate
                AND v.isFinished = true
                AND v.paymentType = :paymentType"
        );

        $query->setParameter('startDate', $startDate);
        $query->setParameter('endDate', $endDate);
        $query->setParameter('paymentType', $paymentType);

        return $query->getResult();
    }
}
